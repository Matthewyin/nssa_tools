name: Deploy to Firebase App Hosting

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        # Clean install
        rm -rf node_modules package-lock.json .nuxt .output

        # Install dependencies
        npm ci

        # Install platform-specific rollup binding for CI
        npm install @rollup/rollup-linux-x64-gnu --save-dev

    - name: Create environment file
      run: |
        echo "FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" >> .env
        echo "FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}" >> .env
        echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env
        echo "FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}" >> .env
        echo "FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}" >> .env
        echo "FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}" >> .env
        echo "FIREBASE_ADMIN_PRIVATE_KEY=${{ secrets.FIREBASE_ADMIN_PRIVATE_KEY }}" >> .env
        echo "FIREBASE_ADMIN_CLIENT_EMAIL=${{ secrets.FIREBASE_ADMIN_CLIENT_EMAIL }}" >> .env
        echo "FIREBASE_ADMIN_PROJECT_ID=${{ secrets.FIREBASE_ADMIN_PROJECT_ID }}" >> .env
        echo "NODE_ENV=production" >> .env

    - name: Run type check
      run: npm run typecheck
      continue-on-error: true

    - name: Build application
      run: npm run build

    - name: Check deployment readiness
      run: |
        if [ -z "$FIREBASE_SERVICE_ACCOUNT" ]; then
          echo "üîß Firebase Service Account not configured yet"
          echo "üìã To complete deployment, please:"
          echo "1. Generate Firebase Service Account JSON"
          echo "2. Add it as GitHub Secret: FIREBASE_SERVICE_ACCOUNT_N8N_PROJECT_460516"
          echo "3. Re-run this workflow"
          echo ""
          echo "‚úÖ Build completed successfully!"
          echo "üìÅ Static files ready for deployment in .output/public/"
        else
          echo "‚úÖ Firebase Service Account configured, proceeding with deployment..."
        fi
      env:
        FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_N8N_PROJECT_460516 }}

    - name: Deploy to Firebase App Hosting
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: '${{ secrets.GITHUB_TOKEN }}'
        firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_N8N_PROJECT_460516 }}'
        projectId: n8n-project-460516
        channelId: live
      env:
        FIREBASE_CLI_EXPERIMENTS: webframeworks
      # Âè™ÊúâÂú®ÊúâService AccountÊó∂ÊâçÈÉ®ÁΩ≤
      if: secrets.FIREBASE_SERVICE_ACCOUNT_N8N_PROJECT_460516 != ''

    - name: Build summary
      run: |
        echo "üéâ Build Summary:"
        echo "- Node.js version: $(node --version)"
        echo "- Build strategy: Clean Nuxt build"
        echo "- Output directory: .output/public/"
        echo "- Files generated: $(ls -la .output/public/ | wc -l) files"
        echo ""
        if [ -z "$FIREBASE_SERVICE_ACCOUNT" ]; then
          echo "üìã Next steps:"
          echo "1. Configure Firebase Service Account"
          echo "2. Add GitHub Secrets"
          echo "3. Re-run deployment"
        else
          echo "‚úÖ Deployment completed!"
        fi
      env:
        FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_N8N_PROJECT_460516 }}
